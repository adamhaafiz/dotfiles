#!/bin/sh

main() {
  install_homebrew
  install_packages_and_apps
  update_packages_and_apps

  clone_dotfiles
  setup_dotfiles

  install_oh_my_zsh
  install_oh_my_zsh_plugins

  # shellcheck disable=SC2119
  install_oh_my_zsh_aliases
  set_macos_preferences

  print_url_to_docs
}

install_homebrew() {
  if ! command -v brew > /dev/null 2>&1; then
    pretty_print "Installing Homebrew"
      /bin/bash -c \
        "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    pretty_print "Getting doctor's approval"
    brew doctor
  fi
}

install_packages_and_apps() {
  pretty_print "Installing Homebrew packages"
  brew bundle --file=- <<EOF
    tap "homebrew/cask-fonts"

    brew "mas"
    brew "vapor"
    
    cask "dash"
    cask "time-out"
    cask "rectangle"
    cask "deepl"
    cask "iterm2"
    cask "menumeters"
    cask "google-chrome"
    cask "bitwarden"
    cask "visual-studio-code"
    cask "spotify"
    cask "slack"
    cask "font-hack-nerd-font"
    cask "paw"
    cask "gitup"
    cask "postman"
    cask "android-studio"
    cask "appcode"
    cask "sourcetree"
    
    # Social
    cask "whatsapp"
    cask "telegram"
    
    # Work
    cask "pritunl"
    cask "zeplin"
    cask "sequel-pro"
EOF
  
  pretty_print "Installing Mac App Store apps"
  mas install 497799835 # Xcode
  mas install 409203825 # Numbers
  # mas install 1107421413 # 1Blocker
  # mas install 1438243180 # Dark Reader for Safari
}

update_packages_and_apps() {
  pretty_print "Checking for updates in Homebrew packages"

  # https://docs.brew.sh/FAQ#how-do-i-update-my-local-packages
  brew update
  brew upgrade
}

clone_dotfiles() {
  if [ ! -d "$HOME/.dotfiles" ]; then
    pretty_print "First launch! Cloning .dotfiles"
    git clone https://github.com/haafiz-io/dotfiles.git "$HOME/.dotfiles"
  fi
}

setup_dotfiles() {
  # Symlink .zshrc
  if [ ! -f "$HOME/.zshrc" ]; then
    pretty_print "Symlinking .zshrc"
    ln -s "$HOME/.dotfiles/z-shell-run-config" "$HOME/.zshrc"
  fi

  # Tell iTerm2 to load preferences from dotfiles
  pretty_print "Setting iTerm 2 preferences"
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$HOME/.dotfiles"
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
}

install_oh_my_zsh() {
  if [ ! -d "$HOME/.oh-my-zsh" ]; then
    pretty_print "Installing Oh My Zsh"
    pretty_print "Rerun the script again after Z shell restarts"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --keep-zshrc
  fi
}

install_oh_my_zsh_plugins() {
  pretty_print "Installing Oh My Zsh plugins"
  
  # ZSH-z
  if [ ! -d "$HOME/.oh-my-zsh/plugins/zsh-z" ]; then
    git clone https://github.com/agkozak/zsh-z "$HOME/.oh-my-zsh/plugins/zsh-z"
  fi

  # auto-color-ls
  if [ ! -d "$HOME/.oh-my-zsh/plugins/auto-color-ls" ]; then
    gem install colorls --user-install
    git clone https://github.com/gretzky/auto-color-ls "$HOME/.oh-my-zsh/plugins/auto-color-ls"
  fi

  # zsh-syntax-highlighting
  if [ ! -d "$HOME/.oh-my-zsh/plugins/zsh-syntax-highlighting" ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.oh-my-zsh/plugins/zsh-syntax-highlighting"
  fi
}

# shellcheck disable=SC2120
install_oh_my_zsh_aliases() {
  pretty_print "Creating Oh My Zsh aliases"

  if [ ! -f "$HOME/.oh-my-zsh/custom/aliases.zsh" ]; then
    pretty_print "Creating custom/aliases.zsh"
    cat <<-EOF >> "$HOME/.oh-my-zsh/custom/aliases.zsh"
      alias lc='colorls -A1 --sd'
      alias gt='git fetch -p && git branch -vv | grep "origin/.*: gone]" | awk "{print \\\$1}" | xargs git branch -D'
EOF
  fi

  if [ ! -f "$HOME/.oh-my-zsh/custom/cman.zsh" ]; then
    pretty_print "Creating custom/cman.zsh"
    cat <<EOF >> "$HOME/.oh-my-zsh/custom/cman.zsh"
      cman() {
        if [ -z "\$1" ]
        then
          echo "No argument supplied"
        else
          man \$1 | col -bx | code -
        fi
      }
EOF
  fi
}

# https://github.com/mathiasbynens/dotfiles/blob/main/.macos
set_macos_preferences() {
  pretty_print "Setting macOS preferences"

  # Close any open System Preferences panes, to prevent them from overriding
  # settings we’re about to change
  osascript -e 'tell application "System Preferences" to quit'

  # Ask for the administrator password upfront
  sudo -v

  # Keep-alive: update existing `sudo` time stamp until `.macos` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  # Keyboard -> Input Sources
  # Show Input menu in menu bar
  defaults write com.apple.TextInputMenu '{ visible = 1; }'
}

print_url_to_docs() {
  pretty_print "Check out the docs: https://app.gitbook.com/@haafiz/s/dotfiles/"
}

# https://gist.github.com/arianacosta/d6d1c521d231cc09ec5fe850ae2f5be1
pretty_print() {
  # COLOR="96m";
  COLOR="92m";
  # COLOR="93m";
  # COLOR="91m";
  # COLOR="0m"; # default colour

  STARTCOLOR="\e[$COLOR";
  ENDCOLOR="\e[0m";

  printf "$STARTCOLOR%b$ENDCOLOR" "\\n▸▸▸ $1\\n";
}

set -e

# https://unix.stackexchange.com/a/449508
main "$@"; exit